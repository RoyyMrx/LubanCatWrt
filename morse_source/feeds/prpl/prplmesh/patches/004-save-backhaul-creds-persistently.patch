diff --git a/agent/src/beerocks/slave/backhaul_manager/backhaul_manager.cpp b/agent/src/beerocks/slave/backhaul_manager/backhaul_manager.cpp
index 677eb5627..5717f8e41 100644
--- a/agent/src/beerocks/slave/backhaul_manager/backhaul_manager.cpp
+++ b/agent/src/beerocks/slave/backhaul_manager/backhaul_manager.cpp
@@ -975,7 +975,9 @@ bool BackhaulManager::backhaul_fsm_wireless(bool &skip_select)
     case EState::WPA_ATTACH: {
 
         bool success = true;
-
+#if defined(MORSE_MICRO)
+        bool is_bh_connected = false;
+#endif
         auto db = AgentDB::get();
 
         for (auto &radio_info : m_radios_info) {
@@ -1054,6 +1056,23 @@ bool BackhaulManager::backhaul_fsm_wireless(bool &skip_select)
                     break;
                 }
 
+#if defined(MORSE_MICRO)
+                /*The Following changes are done as a part of APP-1464 to re-configure the AP if the
+                Agent comes up with an existing Backhaul connection, otherwise the Agent is constantly
+                stuck in a WAIT_FOR_WPS loop and recovers only at PBC button push*/
+                if (radio_info->sta_wlan_hal->is_connected()) {
+                    LOG(ERROR) << "MorseMicro:There is an existing backhaul connection";
+                    db->backhaul.selected_iface_name = radio_info->sta_iface;
+                    db->backhaul.connection_type = AgentDB::sBackhaul::eConnectionType::Wireless;
+                    // Send slave enable the AP's
+                    is_bh_connected = true;
+                    send_slaves_enable();
+                    FSM_MOVE_STATE(CONNECTED);
+                    break;
+                } else
+                    LOG(ERROR) << "MorseMicro: There is no backhaul move to WAIT FOR WPS STATE";
+#endif
+
                 /**
                  * This code was disabled as part of the effort to pass certification flow
                  * (PR #1469), and broke wireless backhaul flow.
@@ -1110,6 +1129,12 @@ bool BackhaulManager::backhaul_fsm_wireless(bool &skip_select)
 
         state_time_stamp_timeout =
             std::chrono::steady_clock::now() + std::chrono::seconds(STATE_WAIT_WPS_TIMEOUT_SECONDS);
+
+#if defined(MORSE_MICRO)
+        if(is_bh_connected)
+            break;
+        else
+#endif
         FSM_MOVE_STATE(WAIT_WPS);
         break;
     }
